guild-id: 365315337240969226

commands:
  message:
    binfiles:
      enabled: true
    googleThat:
      enabled: true
  slash:
    clear:
      enabled: true
      limit: 128
    select-roles:
      enabled: true
      initial-response:
        text: Select your roles.
      updated-response:
        text: Roles updated!
      roles:
        - id: 422765390804811798
          emoji:
            name: PepeSalute
            id: 682068535874289690
        - id: 572870240258490397
          emoji:
            name: kingPeppo
            id: 599402709921300511
        - id: 1182775685463408760
          emoji:
            name: SpaghettiCode
            id: 767150167967137823
        - id: 706715185032855603
          emoji:
            name: youtube
            id: 750205369648939028
        - id: 741802867060637806
          emoji:
            name: twitch
            id: 750205150005690408
        - id: 709253846529998938
          emoji:
            name: IntelliJ
            id: 869666786277199872
        - id: 709253726824693912
          emoji:
            name: Eclipse
            id: 708893584824467536
        - id: 800914748161261608
          emoji:
            name: VSC
            id: 800914318463205386
    post:
      enabled: true
    custom:
      - name: added
        description: Show Patrons how to access the GitHub
        response:
          text: |-
            <:peepoHeart:814047012395679754> __**Thank you very much!**__

            *You have been added to a Team.*

            To accept the invite to CodedRed's organization go here: <https://github.com/CodedRedYT>
            Once there you will be able to view the repositories that your team has access to!
            Thank you again for supporting! <:mcheart:814047709102997594>
      - name: beginner
        description: Show beginners some information to help get started programming
        response:
          embeds:
            - title: New to Java or programming in general?
              description: |-
                You should probably watch **[this video](https://youtu.be/eIrMbAQSU34)**. It goes over the very basics of Java such as how methods work, different data types, how loops work, and a bunch of other stuff.

                If you want to learn more, you can watch **[this video](https://youtu.be/xk4_1vDrzzo)** which also goes over the very basics, but also covers other stuff such as different modifiers, interfaces, encapsulation, and towards the end even creating a basic GUI application with Swing!
      - name: coding
        description: Show people where to ask for programming help
        response:
          embeds:
            - title: Need help coding something?
              description: Create a post in the <#1027121783792480296> forum!
      - name: constructor
        description: Show how Java constructors work and can be used
        response:
          embeds:
            - title: How Java Constructors work
              author:
                name: By BingoRufus
                icon: https://cdn.discordapp.com/avatars/135545556876394497/dd9b9015a1fcdf5b01fc70f9cdd93902.webp
              description: |-
                A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes. The main way we use constructors in Spigot plugins is to allow classes to reference the Main class.

                Weâ€™ll start out with our main class titled Main and another class titled TutorialClass.

                The format for constructors is:
                `public ClassName(args)`

                In this case, it would look like this:
                `public TutorialClass(Main m) {`
                The argument being the main class. Now, whenever a TutorialClass is created it will require a Main class.

                So our code for the TutorialClass will look like this
                ```java
                public class TutorialClass {

                    private Main main;

                    public TutorialClass(Main main) {
                        this.main = main;
                    }

                }```
                And when creating the TutorialClass we now only need to do `new TutorialClass(this);`

                This will eliminate the need for static variables and is overall good practice.
      - name: crp
        description: Point users of CodedRed's Spigot plugins to the CRP Discord Server
        response:
          text: |-
            **Need help with one of CodedRed's Spigot plugins?**
            Join the new Discord Server!

            https://discord.gg/7A9UA2n

            > Note: Currently you will not receive active support, however, there is an FAQ channel that should answer most if not all of your questions. If you still need help, ask in <#1028938627486601267> and someone from the community may try to help you.
      - name: debug
        description: Show users how to debug code
        response:
          embeds:
            - author:
                name: By BingoRufus
                icon: https://cdn.discordapp.com/avatars/135545556876394497/dd9b9015a1fcdf5b01fc70f9cdd93902.webp
              description: |-
                How to debug code
                ```md
                1. Establish your goal.
                # To fix your problem it is first important that you know what you want to do.```
                ```md
                2. Identify the problem.
                # This is often the hardest step. But it is the most important. "My plugin isn't working" is not a problem. "My plugin isn't loading" or "My listener isn't working" is a good example of a problem. ```
                ```md
                3. Isolate the problem.
                # Once you have identified the problem, it is important to locate what is causing it. Having an exception that prints a stacktrace to the console is probably the easiest way to find out the problem. Whenever you have a bug, make sure to check console for any errors. See the bottom for more info.```
                ```md
                4. Fix the problem
                # Once you have identified the problem, and tracked the origin of it, that is when you should begin to fix it. If you can't think of a fix, don't be afraid to ask the discord or google.```
                ```md
                5. Test it.
                # Whenever you edit your code, test it, and if there's still an issue, go through steps 1-5 again```

                **Whenever you get help or give help to someone you may notice that all 5 of these things are required to fix the problem. If you're asking for help, try to go through steps one and 2 so that you can get better help.**


                Below is an example of going through the process, (The code could be optimized quite a bit, but I'll stick to this so it is easier to understand for more people)

                <https://pastebin.com/19Hj5nUr>
                ```md
                1. I want to make a command that will send a message to the player containing all of the arguments. For example "/tellme this is a test command" will send the player a message of "this is a test command"```
                ```md
                2. When I run the command nothing happens.```

                Now that we know what we're trying to do, and we know what is happening, we need to identify the problem. The first step would be to look in console for a stack trace. If there isn't a stack trace, that's when we start using the most important method in Java; System.out.println(); We can modify our onCommand method to include these debug messages like so:
                <https://pastebin.com/Whj3C9dc>

                If we run this and type the command /tellme test We would see this in the console.
                ```Command sent
                tellme
                false```

                That means that the if statement on line 5 is false.

                ```md
                3. label.equalsIgnoreCase("telme") is false```
                Now looking at what we're comparing, the label for the command being run is tellme and we are comparing it to telme. This problem is caused just by a typo.
                ```md
                4. Replace  "if (label.equalsIgnoreCase("telme"))" with "if (label.equalsIgnoreCase("tellme"))"```
                ```md
                5. "/tellme test message" sends a message of "An internal error occured while attempting to perform this command"```
                Now we go through steps 1-5 again.
                If we go look at the console we will see an error that would look something like <https://pastebin.com/4byGYQhwWhen> looking at the log we can see the issue is caused on line 9 of the main class.
                We can fix it by replacing the <= with < in the for loop. For more info on reading debug logs you can visit <https://www.spigotmc.org/wiki/fixing-plugin-problems-easily-reading-stacktraces/>

                If you're ever stuck, visit <https://bit.ly/howtodebug>
      - name: designer
        description: Are you a graphic designer?
        response:
          text: |-
            CodedRed is currently looking for graphic designers!
            If you're interested, private message CodedRed#0900.
      - name: dontasktoask
        description: Don't ask to ask, just ask.
        response:
          text: https://dontasktoask.com/
      - name: ep1
        description: Show a link to the start of the Spigot plugin series
        response:
          text: |-
            Check out how to code Spigot plugins here!
            https://youtu.be/r4W4drYdb4Q
      - name: eta
        description: How long?
        response:
          text: About a day. Give or take a few years
      - name: google
        description: Google it
        response:
          text: https://tenor.com/view/levar-burton-reading-rainbow-google-that-shit-google-gif-15062945
      - name: halp
        description: Halp!1!!!111!1
        response:
          text: https://imgur.com/2STmzue.png
      - name: mwe
        description: Explains how to create a Minimum Working Example
        response:
          embeds:
            - title: Minimum Working Examples
              url: https://stackoverflow.com/help/minimal-reproducible-example
              author:
                name: Auster
              description: |-
              When asking a debugging question, people will be better able to provide help if you provide code as text in your question that prospective answerers can easily understand and use to reproduce the problem.
              This is variously referred to as creating a "minimal, reproducible example" (MRE), a "minimal, complete and verifiable example" (MCVE),
              a "minimal, workable example" (MWE), or a "reprex". Regardless of how it's communicated to you, it boils down to ensuring you have included code in your question that follows the following guidlines:
              Your code examples should beâ€¦
              Minimal: Use as little code as possible that still produces the same problem
              Complete: Provide all parts someone else needs to reproduce your problem in the question itself
              Reproducible: Test the code you're about to provide to make sure it reproduces the problem

              The rest of this help article provides guidance on these aspects of writing a minimal, reproducible example.
      - name: hashmap
        description: Explains how HashMaps work
        response:
          embeds:
            - author:
                name: CodedRed
                url: https://cdn.discordapp.com/avatars/295610305734639617/2d86aa877e45196f255528cf423fcf2a.webp
              description: |-
                How HashMaps work in Java
                ```java
                Map<Key, Value> example = new HashMap<>();```
                HashMaps have two things a key and a value. You call the key and get the value it is holding.
                key -- > value

                ```java
                Map<String, Integer> playersBalance = new HashMap<>();```

                The hashmap above is a <String, Integer> meaning it will hold a string that corresponds to a certain Integer.
                For example lets store player's balances in this hashmap. To do this you can do the following code:
                ```java
                playerBalance.put("CodedRed", 10000);
                playerBalance.put("Insprill", 5003);
                playerBalance.put("danc", 4665);
                playerBalance.put("Deerjump", 3761);
                ```
                You can store as many different pairs of information you want in a hashmap. However, if you try to put value in with the same key name then it will overwrite the old key. Hence, you cannot have the same key names.

                key returns the value so...
                Our info in the hashmap look like this:
                `CodedRed --> 10000`
                `Insprill --> 5003`
                `danc --> 4665`
                `Deerjump --> 3761`

                Say we wanted to get someone's balance:
                ```java
                if (playerBalance.containsKey("CodedRed"))
                int money = playerBalance.get("CodedRed");```
                If you try to get a value with a key that doesn't exist, it will simply return `null`.
      - name: listeners
        description: How Spigot Listeners work
        response:
          embeds:
            - description: |-
                __**Basic Listener Help**__

                Listeners are required when you are dealing with events!
                They are handled in different ways depending on if you are working on an event in your *Main class* or *another separate class*!

                **First Step**
                First make sure to have `implements Listener` at the top of the class which has your event. Example:
                ```java
                public class MyClass implements Listener {
                ```

                **Second Step**
                Register the event!
                In your onEnable you must register the event. To do so you must call upon the classes constructor.
                __*Registering an event that is in your main class:*__
                ```java
                public void onEnable() {
                    this.getServer().getPluginManager().registerEvents(this, this);
                }
                ```
                __*Registering an event that is in a separate class:*__
                ```java
                public void onEnable() {
                    this.getServer().getPluginManager().registerEvents(new MyClass(), this);
                }
                ```
                In this example "MyClass()" is the name of the java class that has my event.

                **Third Step**
                Make sure to have `@EventHandler` above the event method! Example:
                ```java
                @EventHandler
                public void onClick(PlayerInteractEvent event) {

                }
                ```
                **Hope this helped!**
      - name: logs
        description: Show the looooogs
        response:
          text: In your server folder, open the folder called `logs`, in that folder there should be a file called `latest` or `latest.log`. Please drag that file into Discord and send it :)
      - name: naming
        description: Show the proper Java naming conventions
        response:
          embeds:
            - title: Java naming conventions
              url: https://www.geeksforgeeks.org/java-naming-conventions
      - name: paste
        description: Show how to paste code
        response:
          text: |-
            **Please post small amounts of code in blocks like this:**
            > \```java
            > *INSERT CODE HERE*
            > \```
            There should be no space/line between the language and the first backtick (`), not to be confused with a single quote (').

            *If the code is longer than ~24 lines, please use a bin like **<https://paste.insprill.net/>**!*
      - name: singleton
        description: How to use a basic singleton
        response:
          text: |-
            ```java
            private static ClassName instance = new ClassName();

            public static ClassName getInstance() {
                return instance;
            }```
            Non-static methods and variables in this class can then be accessed with `ClassName.getInstance()...`.
            If you want to use this in your main class, then remove the ` = new ClassName()` part and put `instance = this;` in your `onLoad` or `onEnable`.
            Note that this isn't best practice and you should use dependency injection. Run `/constructor` to view examples.
      - name: spigotseries
        description: Link the Spigot plugin tutorial playlist
        response:
          text: https://www.youtube.com/playlist?list=PL65-DKRLvp3Yn7iglPfxKoc7bl0N80XgG
      - name: switch
        description: Switches be switchin
        response:
          text: https://imgur.com/DINBey1.png
      - name: tryandsee
        description: Try it. See what happens.
        response:
          text: https://tryitands.ee/
      - name: udontthink
        description: Your problem is that you don't think!
        response:
          text: https://imgur.com/CTZOlnQ.png
      - name: xy
        description: Ask about your actual problem, not your attempted solution.
        response:
          text: https://xyproblem.info/
      - name: dry
        description: Don't Repeat Yourself
        response:
          text: |-
            Make sure to keep your code DRY! (**D**on't **R**epeat **Y**ourself!) Essentially, you should write methods that prevent you from repeating code.
            https://www.geeksforgeeks.org/dry-dont-repeat-yourself-principle-in-java-with-examples/#

auto-actions:
  - media:
      - TEXT
    actions:
      - pattern: "(?i)amo(ng |g)?us"
        reactions:
          - name: amogus
            id: 816458040982896650
  - channels:
      - 1027121783792480296
    media:
      - TEXT
      - FILE
      - BIN
      - IMAGE
    actions:
      - pattern: "Jar does not contain plugin.yml"
        responses:
          - embeds:
              - title: You forgot to add a `plugin.yml`, or it's in the wrong location.
                description: |-
                  If you aren't using Maven or Gradle, make sure the `plugin.yml` is *just* in the `src` folder, **not in a package**.

                  ```
                  src/
                  â”œâ”€â”€ ...
                  â””â”€â”€ plugin.yml

                  ```
                  If you are using Maven or Gradle, then it should be in `src/main/resources`.
                  ```
                  src/
                  â””â”€â”€ main/
                      â”œâ”€â”€ java/
                      â””â”€â”€ resources/
                          â””â”€â”€ plugin.yml
                  ```

                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "uses the space-character \\(0x20\\) in its name"
        responses:
          - embeds:
              - title: You cannot have spaces in your plugin name!
                description: |-
                  You may only have upper and lowercase letters, numbers, and underscores.

                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "authors are of wrong type"
        responses:
          - embeds:
              - title: The `authors` section of your plugin.yml isn't defined correctly!
                description: |-
                  When using `authors`, it must be defined as a list. For example,
                  ```yaml
                  authors: [ Insprill ]
                  ```or
                  ```yaml
                  authors:
                    - Insprill
                  ```
                  If you only have a single author, you can use `author` instead and define it normally.
                  ```yaml
                  author: Insprill
                  ```

                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "commands are of wrong type.*class java.lang.String cannot be cast to class java.util.Map"
        responses:
          - embeds:
              - title: The `commands` section of your plugin.yml isn't defined correctly!
                description: |-
                  You most likely forgot to put a `:` at the end of your command name.
                  Even if the command doesn't have any additional information defined in the plugin.yml, you still must end it with a `:`.

                  For example:
                  ```yaml
                  commands:
                    hello:
                  ```
                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "Unsupported API version"
        responses:
          - embeds:
              - title: You specified an invalid API version!
                description: |-
                  You either chose an API version that isn't valid, or is newer than your server.
                  API versions are *major* versions from 1.13 and up. (e.g. `1.13`, `1.14`, `1.15`, etc). Anything below 1.13 is not valid.
                  Older versions didn't have this field, so specifying it won't hurt anything. A plugin with a 1.13 API version will gladly run on a 1.12 server.

                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "name is not defined"
        responses:
          - embeds:
              - title: You forgot to specify your plugin's name!
                description: |-
                  In your plugin.yml, make sure to provide a name for your plugin.
                  ```yaml
                  name: MyPlugin
                  ```
                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "Could not load.*in folder.*Restricted Name"
        responses:
          - embeds:
              - title: Your plugin name is restricted.
                description: |-
                  Your plugin's may not be `bukkit`, `minecraft`, or `mojang`.

                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "load is not a valid choice"
        responses:
          - embeds:
              - title: Your plugins `load` parameter is not valid.
                description: |-
                  `load` must be set to `STARTUP` or `POSTWORLD`. Any other options are not valid.

                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "Cannot find main class"
        responses:
          - embeds:
              - title: The server couldn't find the main class of your plugin!
                description: |-
                  Ensure you provided the `main` field in your plugin.yml, and that it is typed correctly.

                  A proper main should look like the following:
                  ```yaml
                  main: me.insprill.myplugin.Main
                  ```
                  If you have it specified and are still getting this error, you most likely have a typo. Double, triple, and quadruple check the package and class name you provided matches the actual name of the package and class name.

                  [More information about the plugin.yml](https://www.spigotmc.org/wiki/plugin-yml/)
      - pattern: "Do not use \\\\t\\(TAB\\) for indentation"
        responses:
          - embeds:
              - title: You cannot use tabs in YAML files!
                description: |-
                  When writing YAML files, you may *not* use tabs! Simply replace any tabs with two or four spaces and you'll be good to go.

                  To check if your YAML files are syntactically correct, you can run them though [yamlchecker.com](https://yamlchecker.com/).
      - pattern: "CommandSender cannot be cast to org\\.bukkit\\.entity\\.Player"
        responses:
          - embeds:
              - title: Looks like you're trying to cast a command's sender to a Player without checking if it is one!
                description: |-
                  Before blindly casting a command's sender to a player, you need to check if it actually *is* a player!

                  You can use a simple `instanceof` check for this.
                  ```java
                  if (sender instanceof Player) {
                    // Do the thing
                  }
                  ```
                  If your command should only be able to be run by players, you can fast-fail with the following code at the top of your command.
                  ```java
                  if (!(sender instanceof Player)) {
                    sender.sendMessage(ChatColor.RED + "This command can only be executed as a player!");
                    return true;
                  }
                  ```
      - pattern: "OfflinePlayer cannot be cast to org\\.bukkit\\.entity\\.Player"
        responses:
          - embeds:
              - title: You cannot cast an OfflinePlayer to a Player!
                description: |-
                  To get a Player from an OfflinePlayer, you must use the `#getPlayer` method.
                  If the player isn't online, this will return null.
                  You can check if the player is online with `#isOnline`.

                  For example:
                  ```java
                  OfflinePlayer offlinePlayer = ...
                  if (!offlinePlayer.isOnline()) {
                    return;
                  }
                  Player player = offlinePlayer.getPlayer()
                  ```
      - pattern: "Plugin already initialized"
        responses:
          - embeds:
              - title: You cannot extend JavaPlugin in more than one class, or create new instances of your main class!
                description: |-
                  If you're extending JavaPlugin in more than one class, or are calling `new` on your main class, stop!

                  Instead, what you want to do, is pass in an instance of your main class to whatever other class needs it.
                  ```java
                  private final JavaPlugin plugin;
                  public ClassName(JavaPlugin plugin) {
                    this.plugin = plugin;
                  }
                  ```With this, you can access all the normal JavaPlugin methods off of the `plugin` parameter. (e.g. `plugin.getConfig()`).

                  If you have something specific in your main class you need to access, you can replace `JavaPlugin` with the name of your class.
                  When you create a new instance of this class from your main class, you will now have to pass in `this` to the constructor like so: `new ClassName(this);`.
      - pattern: "No public constructor"
        responses:
          - embeds:
              - title: Your main class isn't `public`, or doesn't have a public constructor!
                description: |-
                  Your main class must be defined as `public`. This can be done by adding `public` infront of `class`.
                  For example,
                  ```java
                  public class MyPlugin extends JavaPlugin {
                    // ...
                  }
                  ```
                  If your main class is already public, it must also have a public constructor!
                  By default it will already have a public constructor unless you've explicitly added a private one.
      - pattern: "Abnormal plugin type"
        responses:
          - embeds:
              - title: Your main class doesn't have a default constructor!
                description: |-
                  Your main class must have a default constructor. This is a public constructor with no parameters.
                  By default, your main class will already have one of these unless you define a custom one for use with something like [MockBukkit](https://github.com/MockBukkit/MockBukkit).

                  If that's the case, you can re-add the default constructor with the following code:
                  ```java
                  public MyPlugin() {
                  }
                  ```Replace `MyPlugin` with the name of your main class.
      - pattern: "The embedded resource.*cannot be found in"
        responses:
          - embeds:
              - title: Your forgot to add a default file in your plugin, or put it in the wrong place.
                description: |-
                  Make sure it's in the same location as your plugin.yml.
      - pattern: "Loaded class.*which is not a depend, softdepend, or loadbefore of this plugin"
        responses:
          - embeds:
              - title: When using other plugins' APIs, you must specify that in your plugin.yml.
                description: |-
                  This can be done in one of three ways, two of which are most common.

                  If your plugin *cannot* function without the other plugin on the server, add it to the `depend` list.
                  ```yaml
                  depend:
                    - SomeOtherPlugin
                  ```
                  If your plugin *can* function without the other plugin on the server, add it to the `softDepend` list.
                  ```yaml
                  softDepend:
                    - SomeOtherPlugin
                  ```
      - pattern: "main class.*does not extend JavaPlugin"
        responses:
          - embeds:
              - title: You forgot to extend `JavaPlugin` in your main class!
                description: |-
                  For the server to load your plugin, your main class must extend `JavaPlugin`.
                  For example,
                  ```java
                  public class MyPlugin extends JavaPlugin {
                    // ...
                  }
                  ```
      - pattern: "Cannot make player fly if getAllowFlight\\(\\) is false"
        responses:
          - embeds:
              - title: You must allow players to fly before you set them to flying!
                description: |-
                  Before enabling flight for a player, you must allow them to fly with the `#setAllowFlight` method. For example:
                  ```java
                  player.setAllowFlight(true); // This must be first!
                  player.setFlying(true);
                  ```
      - pattern: "Invalid key. Must be \\[a\\-z0\\-9\\/\\._-\\]"
        responses:
          - embeds:
              - title: Your Namespaced Key is invalid!
                description: |-
                  Namespaced Key's may only contain lowercase letters, numbers, underscores, hyphens, and forward slashes.
      - pattern: "NamespacedKey must be less than 256 characters"
        responses:
          - embeds:
              - title: Your Namespaced Key is too long!
                description: |-
                  Namespaced Key's must be *less* than 256 characters long.
      - pattern: "Duplicate recipe ignored with ID"
        responses:
          - embeds:
              - title: You have multiple recipes with the same ID, or registered the same one twice!
                description: |-
                  Make sure your recipes all have unique ID's, and that you check if they're already registered before re-registering them.
      - pattern: "has been compiled by a more recent version of the Java Runtime.*this version of the Java Runtime only recognizes class file versions up to"
        responses:
          - embeds:
              - title: You compiled your plugin with a Java version newer than what your server is running!
                description: |-
                  Java can load .jar files compiled with older versions of Java, but not with newer ones.

                  The general rule-of-thumb is for 1.8-1.16 your plugin should be compiled with Java 8. For 1.17, it should be compiled with Java 16. For anything newer, it should be compiled with Java 17.

                  You can find out what version of Java you have by running `java -version` in a terminal.


statistic-channels:
  - channel-id: 1076891872951291964
    format: "CodedRed Subs: %s"
    statistic: YOUTUBE_SUBS
    data: UC_kPUW3XPrCCRT9a4Pnf1Tg

restricted-channels:
  - channel-id: 687725347051274304
    message:
      text: |-
        This channel is only for showcasing projects! To discuss something you've seen here, please create a thread.
    types:
      - IMAGE
      - VIDEO
      - LINK
      - ATTACHMENT

forms:
  messages:
    invalid-channel:
      text: "You can only use this command in form channels!"
  list:
    - channel: 687727293980082176
      name: "Paid Developer Requests"
      color: "#000000"
      completable: true
      fields:
        - name: Subject
          min: 2
          max: 24
          is-title: true
        - name: Description
          size: LONG
        - name: Budget (USD)
          is-number: true
          min: 10
          max: 1000
        - name: Example picture (URL)
          optional: true
          is-image: true

codebin:
  upload: LUCKO_PASTE
  services:
    HASTEBIN_LEGACY:
      - paste.md-5.net
      - paste.helpch.at
    SOURCE_BIN:
      - sourceb.in
    LUCKO_PASTE:
      - paste.insprill.net
    PASTEBIN:
      - pastebin.com

audit:
  audit-channel: 699125029580832851
  ignore-channels:
    - 692793636429103228
    - 699336876967985312
    - 772145081439354890
  log-bots: false
  events:
    members:
      banned: true
      unbanned: true
      joined: true
      left: true
      voice: true
      updated:
        enabled: false
        nickname: true
        username: true
        avatar: true
        memberAvatar: true
        banner: true
        discriminator: false
    messages:
      deleted: true
      edited: true
      invite-posted: true
    server:
      role:
        created: true
        deleted: true
      channel:
        created: true
        deleted: true
